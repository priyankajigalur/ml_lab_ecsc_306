USN : 01FE15BCS144
Username : priyankajigalur
Batch : C1

LAB_1_ASSIGNMENT_2:
PART 1

#Read 2 arrays x,y containing floating point value
import tensorflow as tf

sess = tf.Session()

a=tf.constant([1,5,6,3,5,6,8,4.0])
b=tf.constant([3,6,7,8,9.0,5,6,4])

#mean of x and y
x=tf.reduce_mean(a)
y=tf.reduce_mean(b)

#varience of x
v_x= tf.add(a,-x)
#y=tf.multiply(x,x)
sess.run(v_x)

v_x1=tf.multiply(v_x,v_x)
sess.run(v_x1)

g=tf.reduce_sum(v_x1)
g=tf.to_float(g)
sess.run(g)

i=tf.count_nonzero(a)
i=tf.to_float(i)
sess.run(i+1)


variance=tf.div(g,i)
sess.run(variance)
            
#covariance = sum((x(i) - mean(x)) * (y(i) - mean(y)))         
j=tf.subtract(b,y)
k=tf.multiply(v_x,j)
covariance=tf.reduce_sum(k)
sess.run(covariance)
            
#m=covariance(x,y)/variance(x)         
m = tf.div(covariance,variance)
sess.run(m)

# c=mean(y)-m*mean(x)
c=tf.subtract(y,tf.multiply(m,x))
sess.run(c)

# y = mx+c
slope=tf.add(tf.multiply(m,b),c)
sess.run(slope)
    

print("Mean of x: ",sess.run(x))
print("Mean of y: ",sess.run(y))
print("Variance of x: ",sess.run(variance))
print("covariance(x,y): ",sess.run(covariance))
print("Value of m: ",sess.run(m))
print("Value of c: ",sess.run(c))
print("Value of y1: ",sess.run(slope))

    
PART 2:
import matplotlib.pyplot  as plt

print("Value of y: ",sess.run(b))
print("Value of y1: ",sess.run(slope))
plt.plot(sess.run(b),sess.run(slope))
plt.axis([0,6,0,5])
plt.show()


#root_mean_sqr_err = sqrt(mean((y-y_pred).^2))

root_mean_sqr_err = tf.reduce_sum(tf.pow(slope-b, 2))/(len(sess.run(a)))
root_mean_sqr_err = tf.sqrt(root_mean_sqr_err)           
print("Root mean square error:",sess.run(root_mean_sqr_err))

################################################################################################
LAB 2

import tensorflow as tf
import numpy
import matplotlib.pyplot as plt
rng = numpy.random



learning_rate = 0.005
training_epochs = 1000
display_step = 50



# Training Data
train_X = numpy.asarray([1,2,4,3,5])
train_Y = numpy.asarray([1,3,3,2,5])
n_samples = train_X.shape[0]

# tf Graph Input
X = tf.placeholder("float")
Y = tf.placeholder("float")

# Set model weights
W = tf.Variable(rng.randn(), name="weight")
b = tf.Variable(rng.randn(), name="bias")



# Construct a linear model
pred = tf.add(tf.multiply(X, W), b)



# Mean squared error
cost = tf.reduce_sum(tf.pow(pred-Y, 2))/(2*n_samples)
# Gradient descent
optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)



# Initializing the variables
init = tf.global_variables_initializer()



# Launch the graph
with tf.Session() as sess:
    sess.run(init)
   # print(sess.run(cost))
    # Fit all training data
    for epoch in range(100):
        for (x, y) in zip(train_X, train_Y):
            sess.run(optimizer, feed_dict={X: x, Y: y})

        #Display logs per epoch step
        if (epoch+1) % display_step == 0:
            c = sess.run(cost, feed_dict={X: train_X, Y:train_Y})
            print ("Epoch:", '%04d' % (epoch+1), "cost=", "{:.9f}".format(c), \
                "W=", sess.run(W), "b=", sess.run(b))

    print ("Optimization Finished!")
    training_cost = sess.run(cost, feed_dict={X: train_X, Y: train_Y})
    print ("Training cost=", training_cost, "W=", sess.run(W), "b=", sess.run(b), '\n')
    plt.plot(train_X, train_Y, 'ro', label='Original data')
    plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label='Fitted line')
    plt.legend()
    plt.show()

    #############################################################################
    optimizer = tf.train.GradientDescentOptimizer(0.005).minimize(cost)
    # Launch the graph
with tf.Session() as sess:
    sess.run(init)

    # Fit all training data
    for epoch in range(100):
        for (x, y) in zip(train_X, train_Y):
            sess.run(optimizer, feed_dict={X: x, Y: y})

        #Display logs per epoch step
        if (epoch+1) % display_step == 0:
            c = sess.run(cost, feed_dict={X: train_X, Y:train_Y})
            print ("Epoch:", '%04d' % (epoch+1), "cost=", "{:.9f}".format(c), \
                "W=", sess.run(W), "b=", sess.run(b))

    print ("Optimization Finished!")
    training_cost = sess.run(cost, feed_dict={X: train_X, Y: train_Y})
    print ("Training cost=", training_cost, "W=", sess.run(W), "b=", sess.run(b), '\n')
    
    #Graphic display
    plt.plot(train_X, train_Y, 'ro', label='Original data')
    plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label='Fitted line')
    plt.legend()
    plt.show()

